<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>一些自己总结的tricks</title>
    <url>/2021/07/28/tricks/</url>
    <content><![CDATA[<p>一些自己总结的tricks，主要是装环境和代码片段，存档自查用</p>
<span id="more"></span>

<h1 id="Centos7安装MySQL5-7版本"><a href="#Centos7安装MySQL5-7版本" class="headerlink" title="Centos7安装MySQL5.7版本"></a>Centos7安装MySQL5.7版本</h1><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">wget -P /tmp https://dev.mysql.com/get/mysql80-community-release-el7-3.noarch.rpm</span><br><span class="line">yum localinstall -y /tmp/mysql80-community-release-el7-3.noarch.rpm</span><br><span class="line"></span><br><span class="line">yum repolist all | grep mysql</span><br><span class="line">yum -y install yum-utils</span><br><span class="line">yum-config-manager --disable mysql80-community</span><br><span class="line">yum-config-manager --enable mysql57-community</span><br><span class="line">yum repolist enabled | grep mysql</span><br><span class="line"></span><br><span class="line">yum install -y mysql-community-server</span><br><span class="line"></span><br><span class="line">service mysqld start</span><br><span class="line">grep &#x27;temporary password&#x27; /var/log/mysqld.log</span><br></pre></td></tr></table></figure>


<h1 id="Python3在内存中打包Zip"><a href="#Python3在内存中打包Zip" class="headerlink" title="Python3在内存中打包Zip"></a>Python3在内存中打包Zip</h1><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># !user/bin/env python3</span></span><br><span class="line"><span class="comment"># -*-coding : utf-8 -*-</span></span><br><span class="line"><span class="keyword">import</span> zipfile</span><br><span class="line"><span class="keyword">from</span> io <span class="keyword">import</span> BytesIO</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">InMemoryZIP</span>(<span class="params"><span class="built_in">object</span></span>):</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="comment"># create the in-memory file-like object</span></span><br><span class="line">        self.in_memory_zip = BytesIO()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">append</span>(<span class="params">self, filename_in_zip, file_contents</span>):</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot; Appends a file with name filename_in_zip \</span></span><br><span class="line"><span class="string">        and contents of file_contents to the in-memory zip.</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        <span class="comment"># create a handle to the in-memory zip in append mode</span></span><br><span class="line">        zf = zipfile.ZipFile(self.in_memory_zip, <span class="string">&#x27;a&#x27;</span>, zipfile.ZIP_DEFLATED, <span class="literal">False</span>)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># write the file to the in-memory zip</span></span><br><span class="line">        zf.writestr(filename_in_zip, file_contents)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># mark the files as having been created on Windows</span></span><br><span class="line">        <span class="comment"># so that Unix permissions are not inferred as 0000</span></span><br><span class="line">        <span class="keyword">for</span> zfile <span class="keyword">in</span> zf.filelist:</span><br><span class="line">            zfile.create_system = <span class="number">0</span></span><br><span class="line">        <span class="keyword">return</span> self</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">appendfile</span>(<span class="params">self, file_path, file_name=<span class="literal">None</span></span>):</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot; Read a file with path file_path \</span></span><br><span class="line"><span class="string">        and append to in-memory zip with name file_name.</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">if</span> file_name <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">            file_name = os.path.split(file_path)[<span class="number">1</span>]</span><br><span class="line"></span><br><span class="line">        f = <span class="built_in">open</span>(file_path, <span class="string">&#x27;rb&#x27;</span>)</span><br><span class="line">        file_contents = f.read()</span><br><span class="line">        self.append(file_name, file_contents)</span><br><span class="line">        f.close()</span><br><span class="line">        <span class="keyword">return</span> self</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">read</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot; Returns a string with the contents of the in-memory zip.</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        self.in_memory_zip.seek(<span class="number">0</span>)</span><br><span class="line">        <span class="keyword">return</span> self.in_memory_zip.read()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">writetofile</span>(<span class="params">self, filename</span>):</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        Write the in-memory zip to a file</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        f = <span class="built_in">open</span>(filename, <span class="string">&#x27;wb&#x27;</span>)</span><br><span class="line">        f.write(self.read())</span><br><span class="line">        f.close()</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    imz = InMemoryZIP()</span><br><span class="line">    imz.appendfile(<span class="string">&#x27;a.txt&#x27;</span>).append(<span class="string">&#x27;test.txt&#x27;</span>, <span class="string">&#x27;This is content in test.txt&#x27;</span>)</span><br><span class="line">    imz.writetofile(<span class="string">&#x27;test.zip&#x27;</span>)</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>tricks</category>
      </categories>
      <tags>
        <tag>tricks</tag>
      </tags>
  </entry>
  <entry>
    <title>【Python】并发场景下的令牌桶限流</title>
    <url>/2021/08/23/%E3%80%90Python%E3%80%91%E5%B9%B6%E5%8F%91%E5%9C%BA%E6%99%AF%E4%B8%8B%E7%9A%84%E4%BB%A4%E7%89%8C%E6%A1%B6%E9%99%90%E6%B5%81/</url>
    <content><![CDATA[<p>并发场景下实现基于令牌桶算法的QPS限流，适合需要精确控制爬虫速率的场景</p>
<span id="more"></span>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># -*- encoding: utf-8 -*-</span></span><br><span class="line"><span class="keyword">from</span> functools <span class="keyword">import</span> wraps</span><br><span class="line"><span class="keyword">from</span> threading <span class="keyword">import</span> RLock</span><br><span class="line"><span class="keyword">from</span> time <span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">from</span> gevent.pool <span class="keyword">import</span> Pool</span><br><span class="line"><span class="keyword">from</span> gevent <span class="keyword">import</span> monkey</span><br><span class="line">monkey.patch_all()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TokenBucket</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, cap: <span class="built_in">int</span>, rate: <span class="built_in">int</span></span>) -&gt; <span class="literal">None</span>:</span></span><br><span class="line">        self._cap = <span class="built_in">float</span>(cap)</span><br><span class="line">        self._tokens = self._cap</span><br><span class="line">        self._rate = <span class="built_in">float</span>(rate)</span><br><span class="line">        self._last_time = time()</span><br><span class="line">        self._lock = RLock()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__get_cur_tokens</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">with</span> self._lock:</span><br><span class="line">            <span class="keyword">if</span> self._tokens &lt; self._cap:</span><br><span class="line">                now = time()</span><br><span class="line">                delta = self._rate * (now - self._last_time)</span><br><span class="line">                self._tokens = <span class="built_in">min</span>(self._cap, self._tokens + delta)</span><br><span class="line">                self._last_time = now</span><br><span class="line">            <span class="keyword">return</span> self._tokens</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__consume</span>(<span class="params">self, tokens: <span class="built_in">int</span></span>):</span></span><br><span class="line">        <span class="keyword">with</span> self._lock:</span><br><span class="line">            <span class="keyword">if</span> tokens &lt;= self.__get_cur_tokens():</span><br><span class="line">                self._tokens -= tokens</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">limit</span>(<span class="params">self, func</span>):</span></span><br><span class="line"><span class="meta">        @wraps(<span class="params">func</span>)</span></span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">with_limit</span>(<span class="params">*args, **kwargs</span>):</span></span><br><span class="line">            <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">                <span class="keyword">if</span> self.__consume(tokens=<span class="number">1</span>):</span><br><span class="line">                    <span class="keyword">return</span> func(*args, **kwargs)</span><br><span class="line">        <span class="keyword">return</span> with_limit</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">token_bucket = TokenBucket(cap=<span class="number">5</span>, rate=<span class="number">5</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@token_bucket.limit</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">task</span>(<span class="params">url</span>):</span></span><br><span class="line">    <span class="built_in">print</span>(time(), url)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    pool = Pool(size=<span class="number">8</span>)</span><br><span class="line">    url_list = [<span class="string">&quot;http://www.baidu.com&quot;</span>] * <span class="number">50</span></span><br><span class="line">    pool.<span class="built_in">map</span>(task, url_list)</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<blockquote>
<p>参考： <a href="https://github.com/titan-web/rate-limit/blob/master/token_bucket/__init__.py">https://github.com/titan-web/rate-limit/blob/master/token_bucket/__init__.py</a></p>
</blockquote>
]]></content>
      <categories>
        <category>code</category>
      </categories>
      <tags>
        <tag>code</tag>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title>【fastapi+sqlalchemy+pymysql】一些总结和沉淀</title>
    <url>/2021/09/29/%E3%80%90fastapi-sqlalchemy%E3%80%91%E4%B8%80%E4%BA%9B%E6%80%BB%E7%BB%93%E5%92%8C%E6%B2%89%E6%B7%80/</url>
    <content><![CDATA[<p>最近在用fastapi+sqlalchemy+pymysql构建API服务器，总结一下自己遇到的问题和解决方法</p>
<span id="more"></span>

<h1 id="FastAPI"><a href="#FastAPI" class="headerlink" title="FastAPI"></a>FastAPI</h1><h2 id="Depends-依赖注入"><a href="#Depends-依赖注入" class="headerlink" title="Depends - 依赖注入"></a>Depends - 依赖注入</h2><blockquote>
<p><a href="https://fastapi.tiangolo.com/zh/tutorial/dependencies/">https://fastapi.tiangolo.com/zh/tutorial/dependencies/</a></p>
</blockquote>
<p>fastapi对接口提供了依赖注入的功能，方便进行代码复用和统一的身份验证等</p>
<p>官方解释的依赖注入的作用:</p>
<blockquote>
<p>编程中的「依赖注入」是声明代码（本文中为路径操作函数 ）运行所需的，或要使用的「依赖」的一种方式。</p>
<p>然后，由系统（本文中为 FastAPI）负责执行任意需要的逻辑，为代码提供这些依赖（「注入」依赖项）。</p>
<p>依赖注入常用于以下场景：</p>
<ul>
<li>共享业务逻辑（复用相同的代码逻辑）</li>
<li>共享数据库连接</li>
<li>实现安全、验证、角色权限</li>
<li>等……</li>
</ul>
<p>上述场景均可以使用依赖注入，将代码重复最小化。</p>
</blockquote>
<p>官方文档写了很多具体的用法，这里仅介绍一下我自己用的一些特性。</p>
<h3 id="对子路由整体进行鉴权"><a href="#对子路由整体进行鉴权" class="headerlink" title="对子路由整体进行鉴权"></a>对子路由整体进行鉴权</h3><p>fastapi提供了APIRouter类来进行子路由的配置，同时，支持在配置子路由时配置依赖注入，使得所有该子路由下的接口可以统一配置鉴权，这样省去了每个接口单独鉴权的麻烦。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">def</span> <span class="title">admin_verify_ticket</span>(<span class="params">request: Request</span>):</span></span><br><span class="line">    <span class="keyword">if</span> request.session.get(<span class="string">&quot;user&quot;</span>, <span class="literal">None</span>):</span><br><span class="line">        <span class="keyword">return</span> request.session.get(<span class="string">&quot;user&quot;</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">raise</span> HTTPException(detail=<span class="string">&quot;用户未认证，需要跳转登陆&quot;</span>, status_code=<span class="number">401</span>)</span><br><span class="line"></span><br><span class="line">router = APIRouter(prefix=<span class="string">&#x27;/test&#x27;</span>, dependencies=[Depends(admin_verify_ticket)])</span><br></pre></td></tr></table></figure>

<p>需要注意的是，配置在路径操作和子路由上的依赖注入函数并不会把返回值传递给API接口，但是可以正常的抛出异常</p>
<h3 id="对通用参数输入进行处理"><a href="#对通用参数输入进行处理" class="headerlink" title="对通用参数输入进行处理"></a>对通用参数输入进行处理</h3><p>通过使用类作为依赖注入，可以方便的对通用的一些参数进行处理，比如列表页的排序、分页等参数</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> fastapi <span class="keyword">import</span> FastAPI</span><br><span class="line"><span class="keyword">from</span> fastapi <span class="keyword">import</span> Depends, Query</span><br><span class="line"></span><br><span class="line">app = FastAPI()</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CommonQueryParams</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, q: <span class="built_in">int</span> = Query(<span class="params">..., ge=<span class="number">1</span>, le=<span class="number">4</span></span>)</span>):</span></span><br><span class="line">        self.q = q</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.get(<span class="params"><span class="string">&#x27;/&#x27;</span></span>)</span></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">def</span> <span class="title">index</span>(<span class="params">params: CommonQueryParams = Depends(<span class="params"></span>)</span>):</span></span><br><span class="line">    <span class="keyword">return</span> &#123;<span class="string">&quot;q&quot;</span>: params.q&#125;</span><br></pre></td></tr></table></figure>

<h1 id="sqlalchemy事务和锁"><a href="#sqlalchemy事务和锁" class="headerlink" title="sqlalchemy事务和锁"></a>sqlalchemy事务和锁</h1><p>注意：这里写的使用事务和锁的方法前提是在初始化数据库引擎的时候不要设置<code>AUTOCOMMIT</code></p>
<h2 id="通过session上下文来方便的管理事务"><a href="#通过session上下文来方便的管理事务" class="headerlink" title="通过session上下文来方便的管理事务"></a>通过session上下文来方便的管理事务</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">session = <span class="keyword">await</span> get_mysql_session()</span><br><span class="line"><span class="keyword">async</span> <span class="keyword">with</span> session.begin():</span><br><span class="line">    r = <span class="keyword">await</span> session.execute(update_stmt)</span><br><span class="line">    <span class="keyword">if</span> r.rowcount == <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line"></span><br><span class="line">    r = <span class="keyword">await</span> session.execute(update_stmt2)</span><br><span class="line">    <span class="keyword">if</span> r.rowcount == <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br></pre></td></tr></table></figure>

<p>通过上下文的方式可以很方便的使用事务：当<code>update_stmt2</code>操作出错或结果不符合预期时，直接return即可以自动回滚事务，无需考虑session的注销以及<code>update_stmt</code>的操作回滚的问题。</p>
<h2 id="使用with-for-update-设置查询锁"><a href="#使用with-for-update-设置查询锁" class="headerlink" title="使用with_for_update()设置查询锁"></a>使用<code>with_for_update()</code>设置查询锁</h2><p>非常深奥的mysql锁的内容这里不涉及，只是简单记录一下在sqlalchemy使用<code>FOR UPDATE</code>语句的方法。</p>
<p>同样是在一个session的上下文中，在query中加上<code>with_for_update()</code>会对查询的行（或者表，取决于查询的where条件中是否有主键）加锁，只有同一session的修改和查询可以执行，其他修改和查询操作会delay直到锁被释放。</p>
<p>一个小例子：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">session = <span class="keyword">await</span> get_mysql_session()</span><br><span class="line"><span class="keyword">async</span> <span class="keyword">with</span> session.begin():</span><br><span class="line">    query = query.with_for_update()</span><br><span class="line">    r = <span class="keyword">await</span> session.execute(query)</span><br><span class="line">    </span><br><span class="line">    r = <span class="keyword">await</span> session.execute(update_stmt)</span><br></pre></td></tr></table></figure>

<p>用这种方式可以缓解因为高并发带来的条件竞争问题</p>
<h1 id="PyMySQL字典游标"><a href="#PyMySQL字典游标" class="headerlink" title="PyMySQL字典游标"></a>PyMySQL字典游标</h1><p>有需求从mysql查询时以字典返回，创建游标对象时加入参数<code>pymysql.cursors.DictCursor</code>来决定获取的每条数据的数据类型为dict</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import pymysql</span><br><span class="line"></span><br><span class="line">conn = pymysql.connect(host=&#x27;localhost&#x27;, user=&#x27;root&#x27;, password=&#x27;******&#x27;, database=&#x27;test&#x27;)</span><br><span class="line">cur = conn.cursor(pymysql.cursors.DictCursor)</span><br><span class="line">cur.execute(&quot;select * from test;&quot;)</span><br><span class="line">data = cur.fetchall()</span><br><span class="line">print(data)</span><br></pre></td></tr></table></figure>

<p>执行结果：<code>[&#123;&#39;id&#39;: 1, &#39;status&#39;: 1, &#39;sum&#39;: 1&#125;]</code></p>
]]></content>
      <categories>
        <category>code</category>
      </categories>
      <tags>
        <tag>code</tag>
        <tag>python</tag>
        <tag>fastapi</tag>
        <tag>sqlalchemy</tag>
      </tags>
  </entry>
</search>
