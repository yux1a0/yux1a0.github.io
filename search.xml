<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>一些自己总结的tricks</title>
    <url>/2021/07/28/tricks/</url>
    <content><![CDATA[<p>一些自己总结的tricks，主要是装环境和代码片段，存档自查用</p>
<span id="more"></span>

<h1 id="Centos7安装MySQL5-7版本"><a href="#Centos7安装MySQL5-7版本" class="headerlink" title="Centos7安装MySQL5.7版本"></a>Centos7安装MySQL5.7版本</h1><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">wget -P /tmp https://dev.mysql.com/get/mysql80-community-release-el7-3.noarch.rpm</span><br><span class="line">yum localinstall -y /tmp/mysql80-community-release-el7-3.noarch.rpm</span><br><span class="line"></span><br><span class="line">yum repolist all | grep mysql</span><br><span class="line">yum -y install yum-utils</span><br><span class="line">yum-config-manager --disable mysql80-community</span><br><span class="line">yum-config-manager --enable mysql57-community</span><br><span class="line">yum repolist enabled | grep mysql</span><br><span class="line"></span><br><span class="line">yum install -y mysql-community-server</span><br><span class="line"></span><br><span class="line">service mysqld start</span><br><span class="line">grep &#x27;temporary password&#x27; /var/log/mysqld.log</span><br></pre></td></tr></table></figure>


<h1 id="Python3在内存中打包Zip"><a href="#Python3在内存中打包Zip" class="headerlink" title="Python3在内存中打包Zip"></a>Python3在内存中打包Zip</h1><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># !user/bin/env python3</span></span><br><span class="line"><span class="comment"># -*-coding : utf-8 -*-</span></span><br><span class="line"><span class="keyword">import</span> zipfile</span><br><span class="line"><span class="keyword">from</span> io <span class="keyword">import</span> BytesIO</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">InMemoryZIP</span>(<span class="params"><span class="built_in">object</span></span>):</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="comment"># create the in-memory file-like object</span></span><br><span class="line">        self.in_memory_zip = BytesIO()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">append</span>(<span class="params">self, filename_in_zip, file_contents</span>):</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot; Appends a file with name filename_in_zip \</span></span><br><span class="line"><span class="string">        and contents of file_contents to the in-memory zip.</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        <span class="comment"># create a handle to the in-memory zip in append mode</span></span><br><span class="line">        zf = zipfile.ZipFile(self.in_memory_zip, <span class="string">&#x27;a&#x27;</span>, zipfile.ZIP_DEFLATED, <span class="literal">False</span>)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># write the file to the in-memory zip</span></span><br><span class="line">        zf.writestr(filename_in_zip, file_contents)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># mark the files as having been created on Windows</span></span><br><span class="line">        <span class="comment"># so that Unix permissions are not inferred as 0000</span></span><br><span class="line">        <span class="keyword">for</span> zfile <span class="keyword">in</span> zf.filelist:</span><br><span class="line">            zfile.create_system = <span class="number">0</span></span><br><span class="line">        <span class="keyword">return</span> self</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">appendfile</span>(<span class="params">self, file_path, file_name=<span class="literal">None</span></span>):</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot; Read a file with path file_path \</span></span><br><span class="line"><span class="string">        and append to in-memory zip with name file_name.</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">if</span> file_name <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">            file_name = os.path.split(file_path)[<span class="number">1</span>]</span><br><span class="line"></span><br><span class="line">        f = <span class="built_in">open</span>(file_path, <span class="string">&#x27;rb&#x27;</span>)</span><br><span class="line">        file_contents = f.read()</span><br><span class="line">        self.append(file_name, file_contents)</span><br><span class="line">        f.close()</span><br><span class="line">        <span class="keyword">return</span> self</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">read</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot; Returns a string with the contents of the in-memory zip.</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        self.in_memory_zip.seek(<span class="number">0</span>)</span><br><span class="line">        <span class="keyword">return</span> self.in_memory_zip.read()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">writetofile</span>(<span class="params">self, filename</span>):</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        Write the in-memory zip to a file</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        f = <span class="built_in">open</span>(filename, <span class="string">&#x27;wb&#x27;</span>)</span><br><span class="line">        f.write(self.read())</span><br><span class="line">        f.close()</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    imz = InMemoryZIP()</span><br><span class="line">    imz.appendfile(<span class="string">&#x27;a.txt&#x27;</span>).append(<span class="string">&#x27;test.txt&#x27;</span>, <span class="string">&#x27;This is content in test.txt&#x27;</span>)</span><br><span class="line">    imz.writetofile(<span class="string">&#x27;test.zip&#x27;</span>)</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>tricks</category>
      </categories>
      <tags>
        <tag>tricks</tag>
      </tags>
  </entry>
  <entry>
    <title>【Python】并发场景下的令牌桶限流</title>
    <url>/2021/08/23/%E3%80%90Python%E3%80%91%E5%B9%B6%E5%8F%91%E5%9C%BA%E6%99%AF%E4%B8%8B%E7%9A%84%E4%BB%A4%E7%89%8C%E6%A1%B6%E9%99%90%E6%B5%81/</url>
    <content><![CDATA[<p>并发场景下实现基于令牌桶算法的QPS限流，适合需要精确控制爬虫速率的场景</p>
<span id="more"></span>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># -*- encoding: utf-8 -*-</span></span><br><span class="line"><span class="keyword">from</span> functools <span class="keyword">import</span> wraps</span><br><span class="line"><span class="keyword">from</span> threading <span class="keyword">import</span> RLock</span><br><span class="line"><span class="keyword">from</span> time <span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">from</span> gevent.pool <span class="keyword">import</span> Pool</span><br><span class="line"><span class="keyword">from</span> gevent <span class="keyword">import</span> monkey</span><br><span class="line">monkey.patch_all()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TokenBucket</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, cap: <span class="built_in">int</span>, rate: <span class="built_in">int</span></span>) -&gt; <span class="literal">None</span>:</span></span><br><span class="line">        self._cap = <span class="built_in">float</span>(cap)</span><br><span class="line">        self._tokens = self._cap</span><br><span class="line">        self._rate = <span class="built_in">float</span>(rate)</span><br><span class="line">        self._last_time = time()</span><br><span class="line">        self._lock = RLock()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__get_cur_tokens</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">with</span> self._lock:</span><br><span class="line">            <span class="keyword">if</span> self._tokens &lt; self._cap:</span><br><span class="line">                now = time()</span><br><span class="line">                delta = self._rate * (now - self._last_time)</span><br><span class="line">                self._tokens = <span class="built_in">min</span>(self._cap, self._tokens + delta)</span><br><span class="line">                self._last_time = now</span><br><span class="line">            <span class="keyword">return</span> self._tokens</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__consume</span>(<span class="params">self, tokens: <span class="built_in">int</span></span>):</span></span><br><span class="line">        <span class="keyword">with</span> self._lock:</span><br><span class="line">            <span class="keyword">if</span> tokens &lt;= self.__get_cur_tokens():</span><br><span class="line">                self._tokens -= tokens</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">limit</span>(<span class="params">self, func</span>):</span></span><br><span class="line"><span class="meta">        @wraps(<span class="params">func</span>)</span></span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">with_limit</span>(<span class="params">*args, **kwargs</span>):</span></span><br><span class="line">            <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">                <span class="keyword">if</span> self.__consume(tokens=<span class="number">1</span>):</span><br><span class="line">                    <span class="keyword">return</span> func(*args, **kwargs)</span><br><span class="line">        <span class="keyword">return</span> with_limit</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">token_bucket = TokenBucket(cap=<span class="number">5</span>, rate=<span class="number">5</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@token_bucket.limit</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">task</span>(<span class="params">url</span>):</span></span><br><span class="line">    <span class="built_in">print</span>(time(), url)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    pool = Pool(size=<span class="number">8</span>)</span><br><span class="line">    url_list = [<span class="string">&quot;http://www.baidu.com&quot;</span>] * <span class="number">50</span></span><br><span class="line">    pool.<span class="built_in">map</span>(task, url_list)</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<blockquote>
<p>参考： <a href="https://github.com/titan-web/rate-limit/blob/master/token_bucket/__init__.py">https://github.com/titan-web/rate-limit/blob/master/token_bucket/__init__.py</a></p>
</blockquote>
]]></content>
      <categories>
        <category>code</category>
      </categories>
      <tags>
        <tag>code</tag>
        <tag>python</tag>
      </tags>
  </entry>
</search>
